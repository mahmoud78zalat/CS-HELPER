-- Complete fix for user_ordering_preferences table foreign key issues
-- Based on Supabase best practices for auth.users integration

-- First, drop the existing table if it exists
DROP TABLE IF EXISTS "user_ordering_preferences" CASCADE;

-- Create the table with proper structure matching auth.users
CREATE TABLE "user_ordering_preferences" (
  "id" UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  -- Use TEXT for user_id to match your existing users table structure
  "user_id" TEXT NOT NULL,
  "content_type" VARCHAR(50) NOT NULL,
  "item_id" UUID NOT NULL,
  "display_order" INTEGER DEFAULT 0 NOT NULL,
  "created_at" TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  "updated_at" TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create a foreign key constraint that references your users table
-- (Assuming your users table has 'id' as TEXT based on the logs)
ALTER TABLE "user_ordering_preferences" 
ADD CONSTRAINT "fk_user_ordering_user_id" 
FOREIGN KEY ("user_id") REFERENCES "users"("id") ON DELETE CASCADE;

-- Create indexes for better performance
CREATE INDEX "idx_user_ordering_user_content" 
  ON "user_ordering_preferences" ("user_id", "content_type");
CREATE INDEX "idx_user_ordering_display_order" 
  ON "user_ordering_preferences" ("display_order");
CREATE INDEX "idx_user_ordering_item_id" 
  ON "user_ordering_preferences" ("item_id");

-- Create a unique constraint to prevent duplicate user/content/item combinations
CREATE UNIQUE INDEX "uk_user_ordering_unique" 
  ON "user_ordering_preferences" ("user_id", "content_type", "item_id");

-- Add comments for documentation
COMMENT ON TABLE "user_ordering_preferences" IS 'Stores user-specific ordering preferences for drag-and-drop functionality';
COMMENT ON COLUMN "user_ordering_preferences"."content_type" IS 'Type of content being ordered: groups, templates, etc.';
COMMENT ON COLUMN "user_ordering_preferences"."item_id" IS 'ID of the specific item being ordered';
COMMENT ON COLUMN "user_ordering_preferences"."display_order" IS 'Custom order position set by the user';

-- Create a function to automatically update the updated_at timestamp
CREATE OR REPLACE FUNCTION update_user_ordering_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Create trigger for automatic timestamp updates
CREATE TRIGGER trigger_update_user_ordering_updated_at 
  BEFORE UPDATE ON "user_ordering_preferences" 
  FOR EACH ROW 
  EXECUTE FUNCTION update_user_ordering_updated_at();

-- Enable Row Level Security if using Supabase
ALTER TABLE "user_ordering_preferences" ENABLE ROW LEVEL SECURITY;

-- Create RLS policy to allow users to manage their own preferences
CREATE POLICY "Users can manage their own ordering preferences" 
ON "user_ordering_preferences" 
FOR ALL 
USING (user_id = current_setting('request.jwt.claims', true)::json ->> 'sub')
WITH CHECK (user_id = current_setting('request.jwt.claims', true)::json ->> 'sub');

-- Insert some test data to verify the table works
-- (This will be cleaned up after testing)
-- INSERT INTO "user_ordering_preferences" ("user_id", "content_type", "item_id", "display_order")
-- VALUES 
--   ('test-user-1', 'groups', gen_random_uuid(), 0),
--   ('test-user-1', 'groups', gen_random_uuid(), 1);

-- Grant necessary permissions
GRANT ALL ON "user_ordering_preferences" TO authenticated;
GRANT ALL ON "user_ordering_preferences" TO service_role;