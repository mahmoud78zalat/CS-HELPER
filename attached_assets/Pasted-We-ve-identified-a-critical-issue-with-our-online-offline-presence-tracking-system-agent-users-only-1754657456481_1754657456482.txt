We’ve identified a critical issue with our online/offline presence tracking system: agent users only appear “online” for a moment—typically after logging in or performing one (or zero) heartbeat ping. After that, even if the agent remains active on the site, their status is marked as “offline,” which is incorrect and disruptive.

I need a complete, in-depth revision of our presence logic—particularly for agents—to ensure that:

Continuous heartbeat signals are sent and received correctly from the moment an agent logs in until they actively log out or close the site.

The system accurately reflects ongoing activity (mouse movement, tab focus, AJAX actions, etc.), not just initial login.

Status is updated in real time and does not default to offline shortly after login unless truly inactive or disconnected.

What needs to be addressed (deep dive required):
Heartbeat reliability: Ensure that heartbeats are sent at proper intervals (e.g., every 20–30 s). Detect and handle scenarios like inactive timers due to background tabs, sleep, or JS throttling, and fallback accordingly.

Session persistence: Confirm that user sessions (especially for agents) correctly stay active in Redis (or your presence store) with TTL renewal per heartbeat, not only once.

Activity detection: Implement or improve mechanisms to detect genuine user activity (e.g., event listeners like mousemove, click, visibilitychange) to keep them marked online even in the background if applicable.

Transition logic: Only mark offline after missing a predefined number of heartbeats (e.g., 3 consecutive misses), not immediately after a stale one.

Edge case handling: Ensure the system handles:

Browser tab sleeping or background throttling

Network reconnection or IP change

Page reloads and SPA route changes

Real-time updates: Validate that backend state changes push status updates to both the admin and agent dashboards via WebSocket or SSE.

Logging & diagnostics: Add detailed logging to trace heartbeat flow—from client to server to presence store—to pinpoint any breakdown in real-time tracking.

Expected deliverables:
A clear design or diagram showing how the heartbeat and presence renewal cycle should function.

Updated client-side pseudocode incorporating robust heartbeat scheduling and activity detection.

Server-side logic updates ensuring TTL refresh per heartbeat and correct offline detection after misses.

Logging hooks or telemetry to monitor heartbeat patterns and detect early failures in production.

Let’s dive into the root cause—this shouldn’t happen with a user actively on the site, and we need to fix it at the core. Please prioritize a thorough audit and revision of the presence system for agents. Thanks!

Why This Matters:
Without persistent tracking, agent users appear offline even when they’re actively engaged—this causes missed communication, stale dashboards for admins, and breaks trust in our system's reliability.

Let me know if you’d like help translating this fix into stories, acceptance criteria, or even mockups for the improved logic flow!