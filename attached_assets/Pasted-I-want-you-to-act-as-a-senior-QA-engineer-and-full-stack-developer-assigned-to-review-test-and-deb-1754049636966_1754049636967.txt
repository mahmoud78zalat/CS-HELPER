I want you to act as a senior QA engineer and full-stack developer assigned to review, test, and debug my entire website thoroughly. Your task is to simulate a manual and automated QA testing process to ensure that no bugs exist at all ‚Äî functionally, visually, or technically. Please follow these steps and principles strictly:

‚úÖ GENERAL GOALS:
Ensure the entire website is fully functional with zero bugs across all browsers, devices, and screen sizes.

Every single feature, interaction, button, form, modal, and page must be tested for expected behavior.

Catch front-end bugs, back-end logic errors, async issues, broken links, broken UI/UX elements, and security vulnerabilities.

Suggest improvements if you find suboptimal performance, poor UX, or code anti-patterns.

Verify the site behaves correctly in low network, offline, mobile, and high-latency environments.

üîç TEST STRATEGY (Do ALL):
Functional Testing:

Test each individual component and page manually and through simulated automation.

Try all valid and invalid inputs in forms. Check validation, error messages, and success flow.

Check routing (if SPA), page transitions, scroll behavior, and popups.

UI/UX Testing:

Make sure everything is pixel-perfect. No layout breaks or inconsistencies.

Hover effects, click feedback, loading spinners, animations should all behave correctly.

Try navigating with keyboard only (tabbing, enter key, space bar, etc.)

Responsiveness & Cross-Browser Testing:

Test on Chrome, Firefox, Safari, Edge, Opera.

Test screen widths: 320px, 480px, 768px, 1024px, 1440px, 1920px.

Simulate device emulators: iPhone SE, iPhone 13, Galaxy Fold, iPad, Surface Pro, etc.

Performance Testing:

Audit the site‚Äôs performance using Lighthouse or simulated analysis.

Highlight any asset bloat, slow scripts, render-blocking CSS/JS.

Test for lazy loading, prefetching, and caching optimizations.

API Testing:

For each API call, check request/response consistency, error handling, loading states, and retry logic.

Ensure no sensitive data is leaked. Add simulated API failure to test how UI handles it.

Security Checks:

Simulate XSS injection, SQL injection, CSRF, and clickjacking risks.

Ensure inputs are sanitized and error messages don't expose backend logic.

Check cookies, headers, and storage for security best practices.

Accessibility (A11Y) Testing:

Check for alt text, ARIA roles, heading levels, color contrast, and focus states.

Use simulated screen readers and check for usability.

Error Logs & Console:

Ensure no warnings or errors in browser console or network tab.

Highlight any 4xx, 5xx, or failed network requests.

Database & State Testing:

If the site is connected to a backend or uses client-side state, verify data integrity.

Try simulating local storage corruption, duplicate submissions, or refreshes mid-operation.

Final Report:

Provide a detailed checklist of all bugs/issues found, if any.

List suggested improvements, even for things that are technically working but could be better.

